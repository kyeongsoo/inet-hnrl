#
# Copyright (C) 2016 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides architecture-specific configurations for an
# abstract model of shared access architectures -- like TDM-PONs or
# DOCSIS cable Internet access -- for the comparison study of
# next-generation network (NGN) access architectures.
#
# Note that [General] section, i.e., configurations common to all
# architectures including those of traffic models, is provided by
# "General.ini".
#


[General]
### [General] section providing configurations common to all network architectures
include General.ini


######################################################################################
### Architecture-Specific Settings (with 1-Gbps access line rate and 4 subscribers)
######################################################################################
[Config Base]
### General
result-dir = results/mixed
#sim-time-limit = 240.5s	# 60s per each sub-period (of total 4); 0.5s added to handle the last 1-s period for throghput averaging
sim-time-limit = 40.5s
warmup-period = 0s
repeat = 10
**.performanceMeter.startTime = 0s
**.performanceMeter.measurementInterval = 1s		# throughput measurement interval (default is 1s)
**.performanceMeter.bitThruput.result-recording-modes = +vector
**.performanceMeter.packetDelay.result-recording-modes = default
**.performanceMeter.packetThruput.result-recording-modes = default
#**.performanceMeter.bitThruput.vector-recording = true
**.performanceMeter.*.vector-recording = true
**.olt.mac[0].queue.*.vector-recording = false	# for debugging of DRR/CSFQ algorithms
### Network configuraion
*.uni_rate = ${ur=1000}Mbps			# rate of UNI
*.distribution_rate = ${dr=1000}Mbps	# rate of distribution fiber
*.backbone_rate = ${br=10000}Mbps		# rate of backbone link (10 Gbps)
*.N = ${N=4}
**.olt.numSubscribers = ${N}
**.olt.mac[0].queue.numFlows = ${N}
**.olt.mac[0].queue.vids = "10 11 12 13"
### Server
**.server.numFtpSrvs = 0
**.server.numUdpApps = 4
**.server.udpApp[*].lineRate = ${br}Mbps	# backbone rate
**.server.udpApp[*].messageLength = 950B	# resulting in 1000-byte Ethernet frame (i.e., UDP(8)+IP(20)+Ethernet(22))
### TBM
**.olt.mac[0].meter[*].bucketSize = ${bs=1}*1000000B	# 1 MB
**.olt.mac[0].meter[*].peakRate = ${br}Mbps		# It should be set to the backbone rate, not the distribution rate,
												# because we now use metering, not shaping.
### TCP
**.tcp.windowScalingSupport = true	# enable window scaling support to provide throughput greater than 6Mbps
**.tcp.advertisedWindow = 65535*100
**.tcp.sackSupport = true
### Flows
# Subscriber 0-2: UDP (CBR) with SR=160Mbps & TGR=50Mbps but different starting times
**.server.udpApp[0].destAddresses = "host[0]"
**.server.udpApp[1].destAddresses = "host[1]"
**.server.udpApp[2].destAddresses = "host[2]"
**.server.udpApp[0..2].messagePeriod = 0.05ms
**.olt.mac[0].meter[0..2].meanRate = 50Mbps
**.server.udpApp[0].startTime = 0.0s
**.server.udpApp[1].startTime = 10.0s
**.server.udpApp[2].startTime = 20.0s
# Subscriber 3 (background traffic): UDP (CBR) with SR=848Mbps & TGR=1000Mbps
**.server.udpApp[3].destAddresses = "host[3]"
**.server.udpApp[3].messagePeriod = 9.4340us
**.olt.mac[0].meter[3].meanRate = 1000Mbps
**.server.udpApp[3].startTime = 0.0s

#[Config drr]
#extends = Base
#**.olt.mac[0].queueType = "DRRVLANQueue"	# OLT downstream queue
##**.olt.mac[0].queue.fifoSize = 16000000B	# 16 MB
#**.olt.mac[0].queue.fifoSize = ${qs=1000000}B	# 1 MB
#**.olt.mac[0].queue.voqSize = ${qs}B
#**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 3044 3044 3044 3044 4566 4566 4566 4566 6088 6088 6088 6088"
##**.olt.mac[0].queue.quanta = "250 250 250 250 500 500 500 500 750 750 750 750 1000 1000 1000 1000"
##**.olt.mac[0].queue.quanta = "100 100 100 100 200 200 200 200 300 300 300 300 400 400 400 400"

[Config drr2]
extends = Base
**.olt.mac[0].queueType = "DRRVLANQueue3"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB
**.olt.mac[0].queue.quanta = "1522 1522 1522 30440"

[Config tbf2]
## original TBF (with meter)
extends = Base
**.olt.mac[0].queueType = "DropTailRRVLANTBFQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB; should be larger than the bucket size
