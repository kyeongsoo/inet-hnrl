#
# Copyright (C) 2016 Kyeong Soo (Joseph) Kim. All rights reserved.
#
# This ini file provides architecture-specific configurations for an
# abstract model of shared access architectures -- like TDM-PONs or
# DOCSIS cable Internet access -- for the comparison study of
# next-generation network (NGN) access architectures.
#
# Note that [General] section, i.e., configurations common to all
# architectures including those of traffic models, is provided by
# "General.ini".
#


[General]
### [General] section providing configurations common to all network architectures
include General.ini
#network = inet.examples.network_pricing.hybrid_service_plan.NgnAccessWithStackedVlans


######################################################################################
### Architecture-Specific Settings (with 100-Mbps access line rate and 16 subscribers)
######################################################################################
[Config Base]
### General
result-dir = results/testStackedVlans
sim-time-limit = 120.5s	# 60s per each sub-period (of total 2); 0.5s added to handle the last 1-s period for throghput averaging
warmup-period = 0s
repeat = 10
**.performanceMeter.startTime = 0s
**.performanceMeter.measurementInterval = 1s		# throughput measurement interval (default is 1s)
**.performanceMeter.bitThruput.result-recording-modes = +vector
**.performanceMeter.packetDelay.result-recording-modes = default
**.performanceMeter.packetThruput.result-recording-modes = default
#**.performanceMeter.bitThruput.vector-recording = true
**.performanceMeter.*.vector-recording = true
**.olt*.mac[0].queue.*.vector-recording = false	# for debugging of DRR/CSFQ algorithms
### Network configuraion
#*.uni_rate = ${ur=100}Mbps # rate of UNI
*.uni_rate = ${ur=1000}Mbps # rate of UNI (1 Gbps)
*.distribution_rate = ${dr=1000}Mbps # rate of distribution fiber (1 Gbps)
*.backbone_rate = ${br=10000}Mbps # rate of backbone link (10 Gbps)
*.N = ${N=8} # 4 for 152-Mbps & 4 for 50-Mbps TGRs under normal service plan
*.Nh = ${Nh=3} # 3 for 50-Mbps TGRs under hybrid service plan
**.olt.numSubscribers = ${$N+1}
**.olt_c.numSubscribers = ${$Nh}
**.olt.mac[0].queue.numFlows = ${$N+1}
**.olt_c.mac[0].queue.numFlows = ${$Nh}
**.olt.mac[0].queue.vids = "10 11 12 13 14 15 16 17 18" # must be equal to numSubscribers
**.olt_c.mac[0].queue.vids = "10 11 12"
### Servers (server & c_server2)
**.*server*.numFtpSrvs = 1
**.*server.numUdpApps = ${N}
**.*server2.numUdpApps = ${Nh}
**.*server*.udpApp[*].lineRate = ${br}Mbps	# backbone rate
**.*server*.udpApp[*].messageLength = 950B	# resulting in 1000-byte Ethernet frame (i.e., UDP(8)+IP(20)+Ethernet(22))
#**.*server*.udpApp[*].messagePeriod = exponential(1s)
#**.*server*.udpApp[*].startTime = uniform(0s, 1s)
### TBM
**.olt.mac[0].meter[*].bucketSize = ${bs=1}*1000000B	# 1 MB
**.olt.mac[0].meter[*].peakRate = ${br}Mbps		# It should be set to the backbone rate, not the distribution rate,
												# because we now use metering, not shaping.
**.olt_c.mac[0].meter[*].bucketSize = ${bs2=1}*1000000B	# 1 MB
**.olt_c.mac[0].meter[*].peakRate = ${br}Mbps		# It should be set to the backbone rate, not the distribution rate,
												# because we now use metering, not shaping.
### TCP
**.tcp.windowScalingSupport = true	# enable window scaling support to provide throughput greater than 6Mbps
**.tcp.advertisedWindow = 65535*100
**.tcp.sackSupport = true
### Flows
# Common settings
**.host[*].numUdpApps = 1
**.server.udpApp[0].destAddresses = "host[0]"
**.server.udpApp[1].destAddresses = "host[1]"
**.server.udpApp[2].destAddresses = "host[2]"
**.server.udpApp[3].destAddresses = "host[3]"
**.server.udpApp[4].destAddresses = "host[4]"
**.server.udpApp[5].destAddresses = "host[5]"
**.server.udpApp[6].destAddresses = "host[6]"
**.server.udpApp[7].destAddresses = "host[7]"
**.host2[*].numUdpApps = 1
**.server2.udpApp[0].destAddresses = "host2[0]"
**.server2.udpApp[1].destAddresses = "host2[1]"
**.server2.udpApp[2].destAddresses = "host2[2]"
# Group 1: Normal service plan, UDP (CBR) with SR=80Mbps & TGR=152Mbps
#**.server.udpApp[0..3].startTime = 0.0s
**.server.udpApp[0..3].startTime = uniform(0s, 1s)
#**.server.udpApp[0..3].messagePeriod = 0.06667ms # for SR=120Mbps
**.server.udpApp[0..3].messagePeriod = 0.1ms # for SR=80Mbps
**.olt.mac[0].meter[0..3].meanRate = 152Mbps
# Group 2: Normal service plan, UDP (CBR) with SR=80Mbps & TGR=50Mbps
#**.server.udpApp[4..7].startTime = 60.0s
**.server.udpApp[4..7].startTime = uniform(0s, 1s)
**.server.udpApp[4..7].messagePeriod = 0.1ms
**.olt.mac[0].meter[4..7].meanRate = 50Mbps
# Group 3: Hybrid service plan, UDP (CBR) with SR=80Mbps & TGR=50Mbps
#**.server2.udpApp[0..2].startTime = 0.0s
**.server2.udpApp[0..2].startTime = uniform(0s, 1s)
**.server2.udpApp[0..2].messagePeriod = 0.1ms
**.olt.mac[0].meter[7].meanRate = 152Mbps
**.olt_c.mac[0].meter[0..2].meanRate = 50Mbps

[Config drr]
extends = Base
**.olt.mac[0].queueType = "DRRVLANQueue"	# OLT downstream queue
#**.olt.mac[0].queue.fifoSize = 16000000B	# 16 MB
**.olt.mac[0].queue.fifoSize = ${qs=1000000}B	# 1 MB
**.olt.mac[0].queue.voqSize = ${qs}B
**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 3044 3044 3044 3044 4566 4566 4566 4566 6088 6088 6088 6088"
#**.olt.mac[0].queue.quanta = "250 250 250 250 500 500 500 500 750 750 750 750 1000 1000 1000 1000"
#**.olt.mac[0].queue.quanta = "100 100 100 100 200 200 200 200 300 300 300 300 400 400 400 400"

[Config drr2]
extends = Base
**.olt.mac[0].queueType = "DRRVLANQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB
#**.olt.mac[0].queue.quanta = "1522 1522 1522 1522 3044 3044 3044 3044 4566 4566 4566 4566 6088 6088 6088 6088"
**.olt.mac[0].queue.quanta = "1522 1522"
#**.olt.mac[0].queue.quanta = "250 250 250 250 500 500 500 500 750 750 750 750 1000 1000 1000 1000"
#**.olt.mac[0].queue.quanta = "100 100 100 100 200 200 200 200 300 300 300 300 400 400 400 400"

[Config hybrid]
extends = Base
#**.olt.mac[0].queueType = "DropTailRRVLANTBFQueue2"	# OLT downstream queue
**.olt.mac[0].queueType = "DropTailRRVLANTBFQueue3"	# OLT downstream queue; now with flow control
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB; should be larger than the bucket size
#**.olt.mac[0].queue.voqThreshold = ${vth=2000}B
**.olt.mac[0].queue.voqThreshold = ${vth=3044}B
**.olt_c.mac[0].queueType = "DRRVLANQueue3"	# OLT_C downstream queue
**.olt_c.mac[0].queue.voqSize = ${vqs}*1000000B	# in MB
**.olt_c.mac[0].queue.quanta = "1522 1522 1522"

[Config hybrid-test]
extends = hybrid
sim-time-limit = 10s

[Config tbf2]
## original TBF (with meter)
extends = Base
**.olt.mac[0].queueType = "DropTailRRVLANTBFQueue2"	# OLT downstream queue
**.olt.mac[0].queue.voqSize = ${vqs=($bs)}*1000000B	# in MB; should be larger than the bucket size
